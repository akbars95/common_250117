--PACKAGE PKG_ROLE
CREATE OR REPLACE PACKAGE PKG_ROLE IS
  PROCEDURE INSERT_ROLE(ROLE_NAME_IN IN T_ROLES.ROLE_NAME%TYPE);
  PROCEDURE DELETE_ALL;

  FUNCTION GET_ROLE_ID_BY_NAME(ROLE_NAME_IN IN T_ROLES.ROLE_NAME%TYPE) RETURN T_ROLES.ROLE_ID%TYPE;
END PKG_ROLE;
/

-- PACKAGE BODY PKG_ROLE
CREATE OR REPLACE PACKAGE BODY PKG_ROLE IS
  PROCEDURE INSERT_ROLE(ROLE_NAME_IN IN T_ROLES.ROLE_NAME%TYPE) AS
    BEGIN
      INSERT INTO T_ROLES (ROLE_NAME) VALUES (ROLE_NAME_IN);
      COMMIT;
    END INSERT_ROLE;

  PROCEDURE DELETE_ALL AS
  BEGIN
    DELETE FROM T_ROLES;
    COMMIT;
  END DELETE_ALL;

  FUNCTION GET_ROLE_ID_BY_NAME(ROLE_NAME_IN IN T_ROLES.ROLE_NAME%TYPE) RETURN T_ROLES.ROLE_ID%TYPE
  IS
    RESULT_RETURN T_ROLES.ROLE_ID%TYPE;
    BEGIN
      SELECT ROLE_ID INTO RESULT_RETURN
      FROM T_ROLES
      WHERE ROLE_NAME = ROLE_NAME_IN;

      RETURN RESULT_RETURN;
    END GET_ROLE_ID_BY_NAME;
END PKG_ROLE;
/

--------------------------------------------------------------------------------------------
--PACKAGE PKG_USERS
CREATE OR REPLACE PACKAGE PKG_USERS IS
  PROCEDURE INSERT_USER(USER_IN IN T_USERS%ROWTYPE);
  PROCEDURE DELETE_ALL;

  FUNCTION GET_LAST_USER
    RETURN T_USERS%ROWTYPE;
  FUNCTION GET_LAST_USER_ID
    RETURN T_USERS.USER_ID%TYPE;
  FUNCTION CREATE_USER(USER_FIRSTNAME_IN     IN T_USERS.USER_FIRSTNAME%TYPE,
                       USER_LASTNAME_IN      IN T_USERS.USER_LASTNAME%TYPE,
                       USER_MIDDLENAME_IN    IN T_USERS.USER_MIDDLENAME%TYPE,
                       USER_EMAIL_IN         IN T_USERS.USER_EMAIL%TYPE,
                       USER_PHONE_IN         IN T_USERS.USER_PHONE%TYPE,
                       USER_GENDER_IN        IN T_USERS.USER_GENDER%TYPE,
                       USER_DATE_OF_BIRTH_IN IN T_USERS.USER_DATE_OF_BIRTH%TYPE,
                       USER_ACTIVE_IN        IN T_USERS.USER_ACTIVE%TYPE,
                       USER_SITE_IN          IN T_USERS.USER_SITE%TYPE,
                       USER_ID_IN            IN T_USERS.USER_ID%TYPE DEFAULT NULL)
    RETURN T_USERS%ROWTYPE;
  FUNCTION GET_USER_BY_USER_ID(USER_ID_IN IN T_USERS.USER_ID%TYPE) RETURN T_USERS%ROWTYPE;
END PKG_USERS;
/

--PACKAGE BODY PKG_USERS
CREATE OR REPLACE PACKAGE BODY PKG_USERS IS
  PROCEDURE INSERT_USER(USER_IN IN T_USERS%ROWTYPE) AS
    BEGIN
      INSERT INTO T_USERS (USER_FIRSTNAME, USER_LASTNAME, USER_MIDDLENAME, USER_EMAIL, USER_PHONE,
                           USER_GENDER, USER_DATE_OF_BIRTH, USER_ACTIVE, USER_SITE)
      VALUES
        (USER_IN.USER_FIRSTNAME, USER_IN.USER_LASTNAME, USER_IN.USER_MIDDLENAME, USER_IN.USER_EMAIL, USER_IN.USER_PHONE,
         USER_IN.USER_GENDER, USER_IN.USER_DATE_OF_BIRTH, USER_IN.USER_ACTIVE, USER_IN.USER_SITE);
      COMMIT;
    END INSERT_USER;

  PROCEDURE DELETE_ALL AS
    BEGIN
      DELETE FROM T_USERS;
      COMMIT;
    END DELETE_ALL;

  FUNCTION GET_LAST_USER
    RETURN T_USERS%ROWTYPE
  AS
    RESULT_RETURN T_USERS%ROWTYPE;
    BEGIN
      SELECT * INTO RESULT_RETURN
      FROM T_USERS
      WHERE ADD_USER_DATE_TIME = (
        SELECT MAX(ADD_USER_DATE_TIME)
        FROM T_USERS
      );
      RETURN RESULT_RETURN;
      EXCEPTION
      WHEN TOO_MANY_ROWS THEN
      SELECT * INTO RESULT_RETURN
      FROM T_USERS
      WHERE USER_ID = (
        SELECT MAX(USER_ID)
        FROM T_USERS
      );
      RETURN RESULT_RETURN;
      WHEN OTHERS THEN
      raise_application_error (-20002,'Other exception.');
      RETURN RESULT_RETURN;
    END GET_LAST_USER;

  FUNCTION GET_LAST_USER_ID
    RETURN T_USERS.USER_ID%TYPE
  AS
    TEMP_USER T_USERS%ROWTYPE;
    BEGIN
      TEMP_USER := GET_LAST_USER;
      RETURN TEMP_USER.USER_ID;
    END GET_LAST_USER_ID;

  FUNCTION CREATE_USER(USER_FIRSTNAME_IN     IN T_USERS.USER_FIRSTNAME%TYPE,
                       USER_LASTNAME_IN      IN T_USERS.USER_LASTNAME%TYPE,
                       USER_MIDDLENAME_IN    IN T_USERS.USER_MIDDLENAME%TYPE,
                       USER_EMAIL_IN         IN T_USERS.USER_EMAIL%TYPE,
                       USER_PHONE_IN         IN T_USERS.USER_PHONE%TYPE,
                       USER_GENDER_IN        IN T_USERS.USER_GENDER%TYPE,
                       USER_DATE_OF_BIRTH_IN IN T_USERS.USER_DATE_OF_BIRTH%TYPE,
                       USER_ACTIVE_IN        IN T_USERS.USER_ACTIVE%TYPE,
                       USER_SITE_IN          IN T_USERS.USER_SITE%TYPE,
                       USER_ID_IN            IN T_USERS.USER_ID%TYPE DEFAULT NULL)
    RETURN T_USERS%ROWTYPE
  AS
    RESULT_RETURN T_USERS%ROWTYPE;
    BEGIN
      RESULT_RETURN.USER_FIRSTNAME := USER_FIRSTNAME_IN;
      RESULT_RETURN.USER_LASTNAME := USER_LASTNAME_IN;
      RESULT_RETURN.USER_MIDDLENAME := USER_MIDDLENAME_IN;
      RESULT_RETURN.USER_EMAIL := USER_EMAIL_IN;
      RESULT_RETURN.USER_PHONE := USER_PHONE_IN;
      RESULT_RETURN.USER_GENDER := USER_GENDER_IN;
      RESULT_RETURN.USER_DATE_OF_BIRTH := USER_DATE_OF_BIRTH_IN;
      RESULT_RETURN.USER_ACTIVE := USER_ACTIVE_IN;
      RESULT_RETURN.USER_SITE := USER_SITE_IN;
      IF USER_ID_IN IS NOT NULL
      THEN
        RESULT_RETURN.USER_ID := USER_ID_IN;
      END IF;

      RETURN RESULT_RETURN;
    END CREATE_USER;

  FUNCTION GET_USER_BY_USER_ID(USER_ID_IN IN T_USERS.USER_ID%TYPE)
    RETURN T_USERS%ROWTYPE
  AS
    RESULT_RETURN T_USERS%ROWTYPE;
  BEGIN
    SELECT U.* INTO RESULT_RETURN
    FROM T_USERS U
    WHERE U.USER_ID = USER_ID_IN;

    RETURN RESULT_RETURN;
  END GET_USER_BY_USER_ID;

END PKG_USERS;
/

--------------------------------------------------------------------------------------------
--PACKAGE PKG_ACCOUNTS
CREATE OR REPLACE PACKAGE PKG_ACCOUNTS IS
  PROCEDURE INSERT_ACCOUNT(ACCOUNT_IN IN T_ACCOUNTS%ROWTYPE);
  PROCEDURE DELETE_ALL;

  FUNCTION GET_ACCOUNT(ACCOUNT_USER_ID_IN IN T_ACCOUNTS.ACCOUNT_USER_ID%TYPE,
                       ACCOUNT_USERNAME_IN IN T_ACCOUNTS.ACCOUNT_USERNAME%TYPE,
                       ACCOUNT_PASSWORD_IN IN T_ACCOUNTS.ACCOUNT_PASSWORD%TYPE) RETURN T_ACCOUNTS%ROWTYPE;
END PKG_ACCOUNTS;
/

--PACKAGE BODY PKG_ACCOUNTS
CREATE OR REPLACE PACKAGE BODY PKG_ACCOUNTS IS
  PROCEDURE INSERT_ACCOUNT(ACCOUNT_IN IN T_ACCOUNTS%ROWTYPE)
  AS
    BEGIN
      INSERT INTO T_ACCOUNTS(ACCOUNT_USER_ID, ACCOUNT_USERNAME, ACCOUNT_PASSWORD)
      VALUES (ACCOUNT_IN.ACCOUNT_USER_ID, ACCOUNT_IN.ACCOUNT_USERNAME, ACCOUNT_IN.ACCOUNT_PASSWORD);
      COMMIT;
    END INSERT_ACCOUNT;

  PROCEDURE DELETE_ALL AS
    BEGIN
      DELETE FROM T_ACCOUNTS;
      COMMIT;
    END DELETE_ALL;

  FUNCTION GET_ACCOUNT(ACCOUNT_USER_ID_IN IN T_ACCOUNTS.ACCOUNT_USER_ID%TYPE,
                       ACCOUNT_USERNAME_IN IN T_ACCOUNTS.ACCOUNT_USERNAME%TYPE,
                       ACCOUNT_PASSWORD_IN IN T_ACCOUNTS.ACCOUNT_PASSWORD%TYPE) RETURN T_ACCOUNTS%ROWTYPE
  AS
    RESULT_RETURN T_ACCOUNTS%ROWTYPE;
    BEGIN
      RESULT_RETURN.ACCOUNT_USER_ID := ACCOUNT_USER_ID_IN;
      RESULT_RETURN.ACCOUNT_USERNAME := ACCOUNT_USERNAME_IN;
      RESULT_RETURN.ACCOUNT_PASSWORD := ACCOUNT_PASSWORD_IN;
      RETURN RESULT_RETURN;
    END GET_ACCOUNT;
END PKG_ACCOUNTS;
/

--------------------------------------------------------------------------------------------
--PACKAGE PKG_USER_ROLES
CREATE OR REPLACE PACKAGE PKG_USER_ROLES IS
  PROCEDURE INSERT_USER_ROLE(USER_ROLE_IN IN T_USER_ROLES%ROWTYPE);
  PROCEDURE DELETE_ALL;
END PKG_USER_ROLES;
/

--PACKAGE BODY PKG_USER_ROLES
CREATE OR REPLACE PACKAGE BODY PKG_USER_ROLES IS
  PROCEDURE INSERT_USER_ROLE(USER_ROLE_IN IN T_USER_ROLES%ROWTYPE)
  AS
    BEGIN
      INSERT INTO T_USER_ROLES(USER_ID, ROLE_ID) VALUES (USER_ROLE_IN.USER_ID, USER_ROLE_IN.ROLE_ID);
    END INSERT_USER_ROLE;

  PROCEDURE DELETE_ALL AS
    BEGIN
      DELETE FROM T_USER_ROLES;
      COMMIT;
    END DELETE_ALL;
END PKG_USER_ROLES;
/

--------------------------------------------------------------------------------------------

--CREATE PROCEDURE
CREATE OR REPLACE PACKAGE PKG_USER_MANAGEMENT
IS
  FUNCTION GET_ALL_USER_ACCOUNTS RETURN SYS_REFCURSOR;

  PROCEDURE LOCKED_USER_EXPIRED_ACCOUNTS;
END PKG_USER_MANAGEMENT;
/

CREATE OR REPLACE PACKAGE BODY PKG_USER_MANAGEMENT
IS
  FUNCTION GET_ALL_USER_ACCOUNTS RETURN SYS_REFCURSOR
  AS
    RETURN_RESULT SYS_REFCURSOR;
    BEGIN
      OPEN RETURN_RESULT FOR
      SELECT *
      FROM T_ACCOUNTS;

      RETURN (RETURN_RESULT);--WITHOUT PARENTHESIS DO NOT WORK
    END GET_ALL_USER_ACCOUNTS;

  PROCEDURE LOCKED_USER_EXPIRED_ACCOUNTS
  AS
    L_T_ACCOUNTS T_ACCOUNTS%ROWTYPE;
    RESULTS SYS_REFCURSOR;
    L_T_USERS T_USERS%ROWTYPE;
    L_T_PASSWORD_HISTORY T_PASSWORD_HISTORY%ROWTYPE;
    L_REG_DATETIME_AND_CHANGE_PASS TIMESTAMP;
    BEGIN
      RESULTS := GET_ALL_USER_ACCOUNTS();
      LOOP
        FETCH RESULTS INTO L_T_ACCOUNTS;
        EXIT WHEN RESULTS%NOTFOUND;
        L_T_USERS := PKG_USERS.GET_USER_BY_USER_ID(L_T_ACCOUNTS.ACCOUNT_USER_ID);
        IF L_T_USERS.USER_ACTIVE = 'T' AND L_T_ACCOUNTS.ACCOUNT_NON_EXPIRED = 1 AND L_T_ACCOUNTS.ACCOUNT_NON_LOCKED = 1 AND L_T_ACCOUNTS.CREDENTIALS_NON_EXPIRED = 1 THEN
          L_T_PASSWORD_HISTORY := PKG_PASSWORD_HISTORY.GET_PASSWORD_HISTORY_BY_ACC_ID(L_T_ACCOUNTS.ACCOUNT_USER_ID);
          L_REG_DATETIME_AND_CHANGE_PASS := L_T_PASSWORD_HISTORY.AC_PAS_CHANGE_DATE_TIME + L_T_ACCOUNTS.COUNT_DAY_NEED_CHANGE_PASS;
          IF SYSTIMESTAMP > L_REG_DATETIME_AND_CHANGE_PASS THEN
            BEGIN
              UPDATE T_USERS SET USER_ACTIVE = 'F' WHERE USER_ID = L_T_ACCOUNTS.ACCOUNT_USER_ID;
              UPDATE T_ACCOUNTS SET CREDENTIALS_NON_EXPIRED = 0 WHERE ACCOUNT_USER_ID = L_T_ACCOUNTS.ACCOUNT_USER_ID;
              COMMIT;
              EXCEPTION
                WHEN others THEN
                  ROLLBACK;
            END;
          END IF;
        END IF;
      END LOOP;

    END LOCKED_USER_EXPIRED_ACCOUNTS;

END PKG_USER_MANAGEMENT;
/

--------------------------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE PKG_PASSWORD_HISTORY
IS
  FUNCTION GET_PASSWORD_HISTORY_BY_ACC_ID(ACCOUNT_USER_ID_IN T_PASSWORD_HISTORY.ACCOUNT_USER_ID%TYPE)
    RETURN T_PASSWORD_HISTORY%ROWTYPE;
END PKG_PASSWORD_HISTORY;
/

CREATE OR REPLACE PACKAGE BODY PKG_PASSWORD_HISTORY
IS
  FUNCTION GET_PASSWORD_HISTORY_BY_ACC_ID(ACCOUNT_USER_ID_IN T_PASSWORD_HISTORY.ACCOUNT_USER_ID%TYPE)
    RETURN T_PASSWORD_HISTORY%ROWTYPE
  AS
    RETURN_RESULT T_PASSWORD_HISTORY%ROWTYPE;
  BEGIN
    SELECT PH.* INTO RETURN_RESULT
    FROM T_PASSWORD_HISTORY PH
    WHERE PH.ACCOUNT_USER_ID = ACCOUNT_USER_ID_IN;

    RETURN RETURN_RESULT;
  END GET_PASSWORD_HISTORY_BY_ACC_ID;

END PKG_PASSWORD_HISTORY;
--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------

